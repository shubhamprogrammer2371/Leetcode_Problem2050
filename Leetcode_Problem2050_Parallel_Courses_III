int comp (const void** a, const void** b)
{
    return (*(int**)a)[0] - (*(int**)b)[0];
}

int fastest(int** list, int* time, int now, int end)
{
    int cost = 0;
    for (int i = 1 ; i <= end ; i++)
        cost = (cost < list[now][i]) ? list[now][i] : cost;
    return time[now-1] + cost;
}

void check(int** list, int* time, int* Pre_work_count, int finish, int* number_place, int now, int start, int** relations, int relationsSize, int* max)
{
    if (start == -1)
        return;
    while((start < relationsSize) && (now == relations[start][0]))
    {
        int lesson = relations[start++][1];
        list[lesson][Pre_work_count[lesson]--] = finish;
        if (!(Pre_work_count[lesson]))
        {
            *max = (*max < fastest(list, time, lesson, list[lesson][0])) ? fastest(list, time, lesson, list[lesson][0]) : *max;
            Pre_work_count[lesson] = -1;
            check(list, time, Pre_work_count, fastest(list, time, lesson, list[lesson][0]), number_place, lesson, number_place[lesson], relations, relationsSize, max);
        }
    }
}

int minimumTime(int n, int** relations, int relationsSize, int* relationsColSize, int* time, int timeSize){
    qsort(relations, relationsSize, sizeof(int*), comp);
    int *Pre_work_count = calloc((n+1),sizeof(int)) ,*number_place = malloc(sizeof(int)*(n+1));
    memset(number_place, -1, (n+1)*sizeof(int));
    for (int i = 0 ; i < relationsSize ;)
    {
        number_place[relations[i][0]] = i;
        int n = relations[i][0];
        while((i < relationsSize) && (n == relations[i][0]))
            Pre_work_count[relations[i++][1]]++;
    }
    int** list = malloc(sizeof(int*)*(n+1));     
    for (int i = 1 ; i <= n ; i++)
    {
        list[i] = malloc(sizeof(int)*(Pre_work_count[i]+1));  
        list[i][0] = Pre_work_count[i];
    }
    int max = 0;
    for (int i = 1 ; i <= n ; i++)
    {
        if (!(Pre_work_count[i]))
        {
            max = (max < fastest(list, time, i, list[i][0])) ? fastest(list, time, i, list[i][0]) : max;
            check(list, time, Pre_work_count, fastest(list, time, i, list[i][0]), number_place, i, number_place[i], relations, relationsSize, &max);
        }
    }
    free(Pre_work_count);
    free(number_place);
    for (int i = 1 ; i <= n ; i++)
        free(list[i]);
    free(list);
    return max;
}
